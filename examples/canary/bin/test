#!/bin/bash

# Acceptance test for terraform-heroku-vpn-gcp module.
# Applies the config, tests that the canary app is alive, then destroys it all.
#
# ## Requires
#   * curl
#   * jq
#   * terraform (0.11.8)
#
# ## Usage
#
# Setup Heroku auth, Google auth, and input variables (see README)
#
# ```bash
# cd examples/canary
# ./bin/test
# ```

# Fail on undeclared variables.
set -u

# Function to initialize local Terraform
terraform_init() {
  echo "‚ñ∂Ô∏è  terraform init"
  terraform init
  if [ ! "$?" = "0" ]
  then
    echo "‚ùå  terraform init failed"
    exit 2
  fi
}

# Function to attempt Terraform apply until successful (limited retries)
terraform_apply() {
  echo "‚ñ∂Ô∏è  terraform apply"
  local apply_count=1
  until terraform apply -auto-approve -input=false -parallelism=4
  do
    if [ "$apply_count" -eq "6" ]; then
      echo "‚ùå  terraform apply failed too many times, attempting clean-up"
      terraform_destroy
      echo "‚ùå  terraform apply failed too many times, gave-up"
      exit 2
    else
      echo "‚ö†Ô∏è  terraform apply failed (${apply_count}/5), retrying in 30-seconds"
      sleep 30
      apply_count=$[$apply_count +1]
    fi
  done
}

# Function to attempt Terraform destroy until successful (limited retries)
terraform_destroy() {
  echo "‚ñ∂Ô∏è  terraform destroy"
  local destroy_count=1
  until terraform destroy -auto-approve -input=false -parallelism=4
  do
    if [ "$destroy_count" -eq "6" ]; then
      echo "‚ùå  terraform destroy failed too many times, so giving up"
      echo "üóë  Manual clean-up of Heroku and Google Cloud resources may be required"
      exit 2
    else
      echo "‚ö†Ô∏è  terraform destroy failed (${destroy_count}/5), retrying in 30-seconds"
      sleep 30
      destroy_count=$[$destroy_count +1]
    fi
  done 
}

# Main test procedure
terraform_init
terraform_apply

health_public_url=$(terraform output health_public_url)
echo "‚ñ∂Ô∏è  health check: ${health_public_url}/health"
health_response_body=$(curl -sS "${health_public_url}/health")
echo $health_response_body | jq .
# Read the JSON response for health check request statuses
health_peer_status=$(echo $health_response_body | jq '.["peer-status"]')
health_duplex_status=$(echo $health_response_body | jq '.["duplex-status"]')

terraform_destroy

if [ ! "$health_peer_status" = "200" ]
then
  echo "‚ùå  test failure: peer connection was not successful (status $health_peer_status)"
  exit 2
fi

if [ ! "$health_duplex_status" = "200" ]
then
  echo "‚ùå  test failure: peer's connection to origin was not successful (status $health_duplex_status)"
  exit 2
fi

echo "‚úÖ  test success"
exit 0
